version: '3.8'

services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always

  backend:
    build: ./backend
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - ./backend:/app
      - ./shared_config:/app/shared_config
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      PYTHONPATH: /app:/app/shared_config
      REDIS_BROKER_URL: ${REDIS_BROKER_URL}
      MODEL_SERVICE_URL: http://model:8001/score
    depends_on:
      - db
      - redis
      - model

  model:
    build: ./model
    command: python serve.py
    volumes:
      - ./model:/app
      - ./shared_config:/app/shared_config
    env_file:
      - ./.env
    environment:
      PYTHONPATH: /app:/app/shared_config

  worker:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    command: celery -A backend_code.celery_worker worker --loglevel=debug
    volumes:
      - ./backend:/app/backend_code
      - ./shared_config:/app/shared_config
    env_file:
      - ./.env
    environment:
      PYTHONPATH: /app/backend_code:/app/shared_config
      REDIS_BROKER_URL: ${REDIS_BROKER_URL}
      DATABASE_URL: ${DATABASE_URL}
      MODEL_SERVICE_URL: http://model:8001/score
    depends_on:
      - db
      - redis
      - model

  cron:
    build: ./cron
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend

volumes:
  db_data:
